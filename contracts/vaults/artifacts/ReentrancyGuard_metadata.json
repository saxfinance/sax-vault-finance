{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/vaults/StrategyEllipsisImpl.sol": "ReentrancyGuard"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/vaults/StrategyEllipsisImpl.sol": {
			"keccak256": "0xe63f706a0fcb55b20c107fd8888dd6467065f6418673d910de05ce5ec7f493e8",
			"license": "MIT",
			"urls": [
				"bzz-raw://ced3c61322c58f09a351347b9cefcd30e5e822c53daed438a5b66cbfe475b553",
				"dweb:/ipfs/Qmc4DfqAruao9gMwSCVaNDowxjGXQvnrrxGvDwaYJQZ4vb"
			]
		}
	},
	"version": 1
}